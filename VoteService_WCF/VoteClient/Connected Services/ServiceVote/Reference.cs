//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VoteClient.ServiceVote {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceVote.IServiceVote")]
    public interface IServiceVote {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceVote/Connect", ReplyAction="http://tempuri.org/IServiceVote/ConnectResponse")]
        int Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceVote/Connect", ReplyAction="http://tempuri.org/IServiceVote/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceVote/Disconnect", ReplyAction="http://tempuri.org/IServiceVote/DisconnectResponse")]
        void Disconnect(int client_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceVote/Disconnect", ReplyAction="http://tempuri.org/IServiceVote/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int client_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceVote/SendAnswerMessage")]
        void SendAnswerMessage(string message, int client_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceVote/SendAnswerMessage")]
        System.Threading.Tasks.Task SendAnswerMessageAsync(string message, int client_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceVote/SendMessage")]
        void SendMessage();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceVote/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceVoteChannel : VoteClient.ServiceVote.IServiceVote, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceVoteClient : System.ServiceModel.ClientBase<VoteClient.ServiceVote.IServiceVote>, VoteClient.ServiceVote.IServiceVote {
        
        public ServiceVoteClient() {
        }
        
        public ServiceVoteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceVoteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceVoteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceVoteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Connect() {
            return base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect(int client_id) {
            base.Channel.Disconnect(client_id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int client_id) {
            return base.Channel.DisconnectAsync(client_id);
        }
        
        public void SendAnswerMessage(string message, int client_id) {
            base.Channel.SendAnswerMessage(message, client_id);
        }
        
        public System.Threading.Tasks.Task SendAnswerMessageAsync(string message, int client_id) {
            return base.Channel.SendAnswerMessageAsync(message, client_id);
        }
        
        public void SendMessage() {
            base.Channel.SendMessage();
        }
        
        public System.Threading.Tasks.Task SendMessageAsync() {
            return base.Channel.SendMessageAsync();
        }
    }
}
